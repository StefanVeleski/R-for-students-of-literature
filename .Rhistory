setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
class(a)
v <- c(1,2,3,4)
v
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
class(a)
v <- c(1, 2, 3, 4)
v <- 1:4
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
?rm
####Set working directory####
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
class(a)
v <- c(1, 2, 3, 4)
v
v <- 1:4
v
class(v)
ls()
remove(list=ls())
####Set working directory####
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R####
x <- 1+2 #alt+ -
x
y <- 3-2
y
z <- x-y
z
z/y
y*z
2^3
sqrt(4)
print(z)
?print
x <- "Hello world!"
a <- 2
A <- 1
class(x)
class(a)
v <- c(1, 2, 3, 4)
v
v <- 1:4
v
class(v)
dir()
list.files()
identical(dir, list.files)
?identical
x <- 1
identical(x, 1)
identical(x, 2)
args(identical)
dir.create("testdir")
file.create("test.R")
file.info("test.R")
file.rename("test.R", "test1.R")
file.copy("test1.R", "test1_copy.R")
file.exists("test1_copy.R")
file.remove("test1.R", "test1_copy.R")
file.remove("testdir")
unlink("testdir", recursive = TRUE)
####Package of the week####
install.packages("swirl")
library(swirl)
install_course("A_(very)_short_introduction_to_R")
swirl()
reading_progress <- function(total, read){
# Let's start with writing the output. The cat() function is basically a combination
# of the c() and print () functions, which returns a character vector.
# This is the text that shows what percentage of the book we have read. The
# 2 argument of the round function is the number of decimal points that the
# function has.
cat("\nYou are", round(read/total*100, 2),"% done!")
# This is the text that will show up when you'll read the full book.
if (total == read) cat(" Congratulations!")
# Using the same condition, we can assign a sound with the beep function of the
# beeper package (package of the week, see the next section)
if (total == read) beep(8)
# Text that will print after reading more than 90% of the book
if (read >= total/1.1 & read < total) cat(" Almost there!")
if (read >= total/1.1 & read < total) beep(5)
# Text that will print once you have read between 50% and 90% of the book.
if (read >= total/2 & read < total/1.1)
cat(" More than halfway done, hang in there!")
if (read >= total/2 & read < total/1.1) beep (2)
# Text that will print when you have read anywhere between 1 page and 50% of
# the book
if (read <= total/2 & read > 0) cat( " Great job, keep grinding!")
if (read <= total/2 & read > 0) beep(10)
# Text that will print when you haven't started reading yet
if (read == 0) cat(" So are you planning to get started or what?")
if (read == 0) beep(9)
# This is the number of bars that the progress chart will contain
max_bar <- 40
# The following code shapes the appearance of the bar itself. The current
# version is made for the "▮", and "▯", bars. If you'd like to useo
# other elements for the chart you will probably need to adjust the number of
# dashes in the rep function (more or fewer dashes than 104)
cat("\n", "┏", rep("-",104), "┓", "\n", sep="")
cat(c(" ",rep("▮", round(read/total*max_bar,0)),
rep("▯", max_bar-round(read/total*max_bar,0))),"")
cat ("\n", "┗", rep("-",104), "┛", "\n\n", sep="")
}
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 100)
library(beepr)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 100)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 1)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 5)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 10)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 35)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 50)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 91)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 95)
# That's the entire function. Now we can run the function with your numbers
reading_progress(total = 100, read = 98)
# Lists
# Lists are single dimensional data structures, that can hold elements of
# various data classes. This shapes the ways we can subset lists. Let's first
# make a list
l <- list(x = 1:5, y = c("a", "b"))
l$x
l[2]
# Lists
# Lists are single dimensional data structures, that can hold elements of
# various data classes. This shapes the ways we can subset lists. Let's first
# make a list
l <- list(x = 1:5, y = c("a", "b"))
# This selects the second element of the list, which is a named (y) character
# vector. As you can notice y does not show up as an object in the environment.
l[2]
#
l$x
#
l$y
?`$`
l["y"]
l["y"]
l[c(1, 2)]
l[[c(2,1)]]
l[[c(1,4)]]
l[[c(2,1)]]
l[[c(2,1)]]
l[[c(1,4)]]
View(l)
# Now let's make a vector containing all the NA elements of x. We can do this
# with the is.na() funciton.
bad <- is.na(x)
# Let's first make a vector containing missing values
x <- c(1, 2, NA, 4, NA, 5)
# Now let's make a vector containing all the NA elements of x. We can do this
# with the is.na() funciton.
bad <- is.na(x)
bad
