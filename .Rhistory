palette = "Paired",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
options(scipen=10000)
set.seed(123)
ggbetweenstats(data = nrc_dataset,
x = Genre,
y = Goodreads,
ylab = "Number of Goodreads ratings (log)",
package = "RColorBrewer",
palette = "Paired",
outlier.tagging = FALSE)+
scale_y_log10()
#Just a correlation analysis of high and low arousal
high_arousal_plot <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'meanH',
add = "reg.line", conf.int = TRUE,
color = 'dimgray',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (high arousal)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
low_arousal_plot <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'meanL',
add = "reg.line", conf.int = TRUE,
color = 'dimgray',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (low arousal)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
combined_arousal <- ggarrange(high_arousal_plot, low_arousal_plot,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
#Just high and low valence
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'TrustPR',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
#Just high and low valence
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanL',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
#Just high and low valence
options(scipen=10000)
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanL',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
library(readr)
nrc_dataset <- read_csv("GitHub/Dissertation/Datasets/nrc_dataset.csv")
View(nrc_dataset)
#Just high and low arousal
options(scipen=10000)
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanL',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
####NRC sentiment plots####
library(ggpubr)
####NRC sentiment plots####
library("tidyverse")
library(ggpubr)
#Just high and low arousal
options(scipen=10000)
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanL',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Correlation plot (full dataset)",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
View(combined_arousal)
#Just high and low arousal
options(scipen=10000)
I <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanH',
add = "reg.line", conf.int = TRUE,
color = '#ED553B',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "High emotional arousal and cultural longevity",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with high arousal as % of total")
I
options(scipen=10000)
J <- ggscatter(nrc_dataset, x = 'Goodreads', y = 'MeanL',
add = "reg.line", conf.int = TRUE,
color = '#3CAEA3',
xscale = "log10",
cor.coef = TRUE, cor.method = "pearson",
title = "Low emotional arousal and cultural longevity",
xlab = "Number of Goodreads ratings (log)", ylab = "Percentage of words with low arousal as % of total")
J
combined_arousal <- ggarrange(I, J,
labels = c("1", "2"),
ncol = 2, nrow = 1)
combined_arousal
library(readr)
Sentiment_dataset1 <- read_csv("GitHub/CHR2020-project/Datasets/Sentiment_dataset1.csv")
View(Sentiment_dataset1)
options(scipen=10000)
set.seed(123)
ggbetweenstats(data = Sentiment_dataset1,
x = Status,
y = Sentiment,
ylab = "Mean sentiment",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
filtered_dataset <- filter(Sentiment_dataset1, Status==Bestsellers, Status==`Canonical novels`)
options(scipen=10000)
set.seed(123)
bestvscanon <- ggbetweenstats(data = filtered_dataset,
x = Status,
y = Sentiment,
ylab = "Mean sentiment",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
bestvscanon
filtered_dataset <- filter(Sentiment_dataset1, Status==`Bestsellers`, Status==`Canonical novels`)
options(scipen=10000)
set.seed(123)
bestvscanon <- ggbetweenstats(data = filtered_dataset,
x = Status,
y = Sentiment,
ylab = "Mean sentiment",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
bestvscanon
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status==`Bestsellers`, Sentiment_dataset1$Status==`Canonical novels`)
options(scipen=10000)
set.seed(123)
bestvscanon <- ggbetweenstats(data = filtered_dataset,
x = Status,
y = Sentiment,
ylab = "Mean sentiment",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
bestvscanon
filter(Sentiment_dataset1, Sentiment_dataset1$Status==`Bestsellers`, Sentiment_dataset1$Status==`Canonical novels`)
View(Sentiment_dataset1)
####Bestsellers vs canon boxplot from CHR2020 data####
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status==`Bestsellers`& Sentiment_dataset1$Status==`Canonical novels`)
####Bestsellers vs canon boxplot from CHR2020 data####
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status=="Bestsellers"& Sentiment_dataset1$Status=="Canonical novels")
View(filtered_dataset)
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status=="Bestsellers" & "Canonical novels")
options(scipen=10000)
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status=="Bestsellers","Canonical novels")
options(scipen=10000)
set.seed(123)
bestvscanon <- ggbetweenstats(data = filtered_dataset,
x = Status,
y = Sentiment,
ylab = "Mean sentiment",
outlier.tagging = TRUE,
outlier.label = Title)+
scale_y_log10()
bestvscanon
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status=="Bestsellers","Canonical novels")
####Bestsellers vs canon boxplot from CHR2020 data####
filtered_dataset <- filter(Sentiment_dataset1, Sentiment_dataset1$Status=="Bestsellers","Canonical novels",.preserve = FALSE)
filtered_dataset <-Sentiment_dataset1 %>%
select(Status) %>%
filter(Status == "Bestsellers" & Status == "Canonical novels")
View(filtered_dataset)
filtered_dataset <-Sentiment_dataset1 %>%
select(Status) %>%
filter(Status == "Bestsellers")
filtered_dataset <-Sentiment_dataset1 %>%
select(Status) %>%
filter(Status == "Bestsellers","Canonical novels")
swirl()
library(swirl)
install.packages("swirl")
swirl()
install.packages("swirl")
library(swirl)
swirl()
5+7
tidytuesdayR::use_tidytemplate()
install.packages(tidytuesdayR)
install.packages("tidytuesdayR")
---
title: "Big Mac index"
author: "Stefan Veleski"
date: "12/23/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
summary(cars)
plot(pressure)
librar
tt
library(tidyverse)
library(tidytuesdayR)
tt
tt <- tt_load("2020-12-22")
tt$'big-mac'
big_mac %>%
add_count(country, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none")
tt <- tt_load("2020-12-22")
tt$'big-mac' %>%
view()
big_mac <- tt$'big-mac' %>%
rename(country = name)
big_mac %>%
add_count(country, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none")
tt <- tt_load("2020-12-22")
library(scales)
themes_set(theme_light())
big_mac %>%
add_count(country, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none")
big_mac %>%
add_count(country, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
mutate(country = fct_reorder (country, local_price, function(.) max(.) / min(.))) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none") +
labs(x = "Time",
y = "Price in local currency")
tt <- tt_load("2020-12-22")
library(scales)
themes_set(theme_light())
big_mac %>%
filter(country_total == max(country_total)) %>%
mutate(country = fct_reorder (country, local_price, function(.) last(.) / first(.))) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none") +
labs(x = "Time",
y = "Price of Big Mac in local currency")
tt <- tt_load("2020-12-22")
library(scales)
themes_set(theme_light())
tt <- tt_load("2020-12-22")
library(scales)
themes_set(theme_light())
tt <- tt_load("2020-12-22")
library(scales)
theme_set(theme_light())
tt$'big-mac' %>%
view()
big_mac <- tt$'big-mac' %>% #initial data cleaning
rename(country = name) %>%
add_count(country, name = "country_total") %>%
arrange(country, date)
big_mac %>%
filter(country_total == max(country_total)) %>%
mutate(country = fct_reorder (country, local_price, function(.) last(.) / first(.))) %>%
ggplot(aes(date, local_price, color = country)) +
geom_line() +
expand_limits(y=0) +
facet_wrap(~ country, scales = "free_y") +
theme(legend.position = "none") +
labs(x = "Time",
y = "Price of Big Mac in local currency")
big_mac %>%
filter(country_total == max(country_total)) %>%
group_by(country) %>%
summarize(big_mac_inflation = last(local_price) / first(local_price) %>%
arrange(desc(big_mac_inflation)) %>%
mutate(country = fct_reorder(country, big_mac_inflation)) %>%
ggplot(aes(big_mac_inflation, country)) +
geom_col() +
scale_x_log10(breaks = c(1, 3, 10, 30, 100))
big_mac %>%
filter(country_total == max(country_total)) %>%
group_by(country) %>%
summarize(big_mac_inflation = last(local_price) / first(local_price) %>%
arrange(desc(big_mac_inflation)) %>%
mutate(country = fct_reorder(country, big_mac_inflation)) %>%
ggplot(aes(big_mac_inflation, country)) +
geom_col() +
scale_x_log10(breaks = c(1, 3, 10, 30, 100))
summary(cars)
plot(pressure)
---
title: 'Notes for Statistics for Linguists: An Introduction Using R'
author: "Stefan Veleski"
date: "12/24/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
2^2
sqrt(2)
ls()
dir()
setwd("C:/Users/Stefan/Documents/GitHub/R-for-students-of-literature")
getwd()
####Basic math in R ####
x <- 1+2 #Shortcut for the arrow is alt+ -
#Alternative is =, but this isn't used that often
x #This text will be ignored by the program
y <- 3-2
y
z <- x-y
z
print(z)
x <- "I like the stock!" #Overwriting the contents of the object with another one
?print
#Spaces don't matter, but capitalization does matter.
a<-1
A <- 2
#Clear environment - broom or rm(list=ls())
c()
?C
2^2
sqrt(2)
#Two letters + Tab choosing function
#up arrow in console to get previous commands
ls()
dir()
?ls()
dir.create("testdir")
getwd()
list.files()
dir.remove("testdir")
file.create("test.R")
file.info("test.R")
file.rename("test.R","test1.R")
file.exists("test.R")
file.exists("test1.R")
file.remove("test1.R")
file.exists("test1.R")
file.create("test.R")
file.copy("test.R", "test_copy.R")
file.exists("test_copy.R")
file.remove("testdir")
file.remove("testdir")
unlink('testdir', recursive=TRUE)
file.remove("test.R", "test_copy.R")
file.path("Week1")
file.path("Week1")
file.path("StarcraftII")
/
+
y*z
z/y
a+A
y*z
print(x)
?print
?file.rename
args(file.copy)
dir()
list.files()
identical(dir, list.files)
identical(A, 2)
args(identical)
?identical
